#!/bin/bash

##########################################################################
##########################################################################
#################   nvOC v0019-2.0 - Community Release   #################
##############        by papampi, Stubo and leenoox         ##############
##########   Based on the original nvOC v0019-1.4 by fullzero   ##########
##########################################################################
##########################################################################


# 3main for v0019-2.0

#
# Dev Mod Log:
#
# v=0001 : papampi and Stubo:
#          bug fixes, code clean-up, optimizations and split into 2 files: 3main and 0miner
#
# v=0002 : leenoox
#          bug fix - $pwr_lim_daggerhashimoto5 > $pwr_lim_daggerhashimoto
#          bug fix - INDIVIDUAL settings were applied to GPU's 0-13 only. Fixed to work with 0-18
#          code optimization
#
# v=0003 : leenoox
#          added GPU LED Logo brightness control
#
# v=0004 : papampi
#          Telegram Changes
#
# v=0005 : papampi
#          Minor change on miner launch and output
#
# v=0006 : papampi
#          Changes local watchdog and temp control start and guake output


# DEV_VERSION=0006


source /home/m1/1bash

nvOC_ver="nvOC v0019-2.0 - Community Release"   # Do not edit this
nvOC_3main_ver="v0019-2.0.006"                  # Do not edit this



#########################################################################
#########################################################################
#########################################################################
#########################################################################

echo ""
echo " $nvOC_ver "
echo ""
echo ""

sudo ldconfig /usr/local/cuda/lib64

GPUS=$(nvidia-smi -i 0 --query-gpu=count --format=csv,noheader,nounits)

NVD=nvidia-settings

SALFTER="NO"

if [ $COIN == "SALFTER_NICEHASH_PROFIT_SWITCHING" ]
then
  SALFTER="YES"
fi

if [ $COIN == "SALFTER_MPH_PROFIT_SWITCHING" ]
then
  SALFTER="YES"
fi

if [ $CLEAR_LOGS_ON_BOOT == "YES" ]
then
  sudo bash '/home/m1/clear_logs'
fi

if [ $LOG_ROTATE == "YES" ]
then
  HCD='/home/m1/log_rotate'
  running=$(ps -ef | awk '$NF~"log_rotate" {print $2}')
  if [ "$running" == "" ]
  then
    guake -n $HCD -r LOG_ROTATE -e "bash /home/m1/log_rotate"
    running=""
  fi
fi

if [ $SALFTER == "NO" ]
then
  pkill -e miner
fi

if [ $LOCALorREMOTE == "REMOTE" ]
then
  export DISPLAY=:0
fi

___1050_or_1050ti="NO"

NORMAL="NO"

P106_100="NO"

nvidia-smi -L > /tmp/tempa

if grep -q "1050" /tmp/tempa;
then
  ___1050_or_1050ti="YES"
fi

if grep -q "P106-100" /tmp/tempa;
then
  ___1050_or_1050ti="YES"
  P106_100="YES"
fi

if grep -q -E '1060|1070|1080' /tmp/tempa;
then
  NORMAL="YES"
fi

rm /tmp/tempa

XORG="FAIL"

if grep -q "28800" /etc/X11/xorg.conf;
then
  XORG="OK"
fi

# dev note by leenoox:
# I don't see the relevance of this code, if the previous check for 28800 fails, but this one passes, it
# will mistakenly set XORG="OK" even though the check for 28800 failed. This needs to be revisited
if [ $P106_100 == "YES" ]
then
  XORG="OK"
fi

# dev note by leenoox:
# we need to create function for this:
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
  sleep 6
fi

if [ $XORG == "FAIL" ]
then
  sudo cp '/etc/X11/xorg.conf.backup' '/etc/X11/xorg.conf'
  echo ""
  echo "Xorg PROBLEM DETECTED"
  echo ""
  echo "Restoring Xorg"
  echo ""
  echo "Rebooting in 5 seconds"
  sleep 5
  sudo reboot
fi

IP=$(ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p')

# Set MINER_PWD if unset
if [ -z ${MINER_PWD+x} ]
then
  MINER_PWD="x"
fi

echo ""
echo ""
echo "rig IP: $IP"
echo ""
echo ""
echo "rig MAC: $MAC"

if [ $SLOW_USB_KEY_MODE == "YES" ]
then
  sleep 6
fi

echo ""
echo ''
lspci | grep VGA

if [ $SLOW_USB_KEY_MODE == "YES" ]
then
  sleep 6
fi

echo ""
echo ''
nvidia-smi
echo ""

if [ $SLOW_USB_KEY_MODE == "YES" ]
then
  sleep 6
fi

if [ $USE_ENVIRONMENTAL_VARIBLES == "YES" ]
then
  export GPU_FORCE_64BIT_PTR="0"
  export GPU_MAX_HEAP_SIZE="100"
  export GPU_USE_SYNC_OBJECTS="1"
  export GPU_MAX_ALLOC_PERCENT="100"
  echo ""
  echo ENVIRONMENTAL VARIBLES SET
fi

if [ $CONTROL_GPU_LED == "YES" ]
then
  ${NVD} -a GPULogoBrightness=$LED_BRIGHTNESS
fi

if [ $POWERLIMIT == "YES" ]
then
  sudo nvidia-smi -pl $POWERLIMIT_WATTS
fi

if [ $INDIVIDUAL_POWERLIMIT == "YES" ]
then
  sudo nvidia-smi -i 0 -pl $INDIVIDUAL_POWERLIMIT_0
  sudo nvidia-smi -i 1 -pl $INDIVIDUAL_POWERLIMIT_1
  sudo nvidia-smi -i 2 -pl $INDIVIDUAL_POWERLIMIT_2
  sudo nvidia-smi -i 3 -pl $INDIVIDUAL_POWERLIMIT_3
  sudo nvidia-smi -i 4 -pl $INDIVIDUAL_POWERLIMIT_4
  sudo nvidia-smi -i 5 -pl $INDIVIDUAL_POWERLIMIT_5
  sudo nvidia-smi -i 6 -pl $INDIVIDUAL_POWERLIMIT_6
  sudo nvidia-smi -i 7 -pl $INDIVIDUAL_POWERLIMIT_7
  sudo nvidia-smi -i 8 -pl $INDIVIDUAL_POWERLIMIT_8
  sudo nvidia-smi -i 9 -pl $INDIVIDUAL_POWERLIMIT_9
  sudo nvidia-smi -i 10 -pl $INDIVIDUAL_POWERLIMIT_10
  sudo nvidia-smi -i 11 -pl $INDIVIDUAL_POWERLIMIT_11
  sudo nvidia-smi -i 12 -pl $INDIVIDUAL_POWERLIMIT_12
  sudo nvidia-smi -i 13 -pl $INDIVIDUAL_POWERLIMIT_13
  sudo nvidia-smi -i 14 -pl $INDIVIDUAL_POWERLIMIT_14
  sudo nvidia-smi -i 15 -pl $INDIVIDUAL_POWERLIMIT_15
  sudo nvidia-smi -i 16 -pl $INDIVIDUAL_POWERLIMIT_16
  sudo nvidia-smi -i 17 -pl $INDIVIDUAL_POWERLIMIT_17
  sudo nvidia-smi -i 18 -pl $INDIVIDUAL_POWERLIMIT_18
fi

if [ $TEAMVIEWER == "YES" ]
then
  running=$(ps -ef | awk '$NF~"teamviewer" {print $2}')
  if [ "$running" == "" ]
  then
    sudo teamviewer --daemon enable
    sleep 2
    guake -n teamviewer -r teamviewer -e "teamviewer"
    running=""
  fi
fi

if [ $TEAMVIEWER == "NO" ]
then
  running=$(ps -ef | awk '$NF~"teamviewer" {print $2}')
  if [ "$running" != "" ]
  then
    sudo teamviewer --daemon disable
    sleep 2
    running=""
  fi
fi

if [ $SSH == "YES" ]
then
  sudo cp '/etc/init/ssh.conf-on' '/etc/init/ssh.conf'
fi

if [ $SSH == "NO" ]
then
  sudo cp '/etc/init/ssh.conf-off' '/etc/init/ssh.conf'
fi

if [ $SRR == "YES" ]
then
  sleep 2
  HCD='SRR'
  running=$(ps -ef | awk '$NF~"SRR" {print $2}')
  if [ "$running" == "" ]
  then
    guake -n $HCD -r SRR -e "bash /home/m1/SRR"
    running=""
  fi
fi

if [ $plusCPU == "YES" ] && [ $AUTO_START_MINER == "YES" ]
then
  HCD='/home/m1/cpuOPT/cpuminer'
  XMRADDR="$XMR_ADDRESS.$XMR_WORKER"
  echo ""
  echo ""
  echo "LAUNCHING:  plusCPU"
  if [[ `ps -ef |grep cpuminer |grep -v grep |wc -l` -eq 0 ]]
  then
    if [ $LOCALorREMOTE == "LOCAL" ]
    then
      guake -n $HCD -r plusCPU -e "$HCD -a cryptonight -o stratum+tcp://$XMR_POOL:$XMR_PORT -u $XMRADDR -p x -t $threadCOUNT"
    else
      screen -dmS plusCPU $HCD -a cryptonight -o stratum+tcp://$XMR_POOL:$XMR_PORT -u $XMRADDR -p x -t $threadCOUNT
    fi
    echo ""
    echo "plusCPU process in guake terminal Tab (f12)"
    echo ""
    running=""
  fi
fi

if [ $AUTO_REBOOT == "YES" ]
then
  HCD='/home/m1/reboot'
  running=$(ps -ef | awk '$NF~"reboot" {print $2}')
  if [ "$running" == "" ]
  then
    guake -n $HCD -r AUTO_REBOOT -e "bash /home/m1/reboot"
    running=""
  fi
fi


if [ $_Parallax_MODE == "YES" ]
then
  HCD='/home/m1/upPASTE'
  running=$(ps -ef | awk '$NF~"upPASTE" {print $2}')
  if [ "$running" == "" ]
  then
    echo ""
    echo ""
    echo "LAUNCHING:  _Parallax_and_lost_post_upPASTE"
    echo ""
    echo "process in guake terminal Tab (f12)"
    echo ""
    guake -n $HCD -r PX_LP_upPASTE -e "bash /home/m1/upPASTE"
    running=""
  fi
fi

sleep 2

if [ $MINER_TEMP_CONTROL == "YES" ]
then
  reup=0
  running=$(ps -ef | awk '$NF~"6tempcontrol" {print $2}')

  if [ "$running" != "" ]
  then
    target=$(ps -ef | awk '$NF~"6tempcontrol" {print $2}')
    kill $target
    reup=1
  fi
  sleep 2
  echo ""
  HCD='/home/m1/6tempcontrol'
  running=$(ps -ef | awk '$NF~"6tempcontrol" {print $2}')
  if [ "$running" == "" ]
  then
    echo "LAUNCHING:  MINER TEMPCONTROL"
    if [ $LOCALorREMOTE == "LOCAL" ]
    then
      #guake -n $HCD -r MINER_TEMP_CONTROL -e "bash /home/m1/6tempcontrol"
      echo ""
      echo "process in screen temp, guake terminal Tab (f12), ~/nvOC temp-log"
      screen -c /home/m1/screenrc-tempcontrol -dmSL temp bash /home/m1/6tempcontrol
      #if guake tab is already showing temp control output dont open a new one
      if [[ -z $(ps ax | grep "tail -f /home/m1/nvoc_logs/tempcontrol-screenlog.0" |grep -v grep) ]];then
        guake -n /home/m1/6tempcontrol -r MINER_TEMP_CONTROL -e "tail -f  /home/m1/nvoc_logs/tempcontrol-screenlog.0 "
      fi
      echo ""
      running=""
    elif [ $LOCALorREMOTE == "REMOTE" ]
    then
      screen -c /home/m1/screenrc-tempcontrol -dmSL temp bash /home/m1/6tempcontrol
      echo ""
      echo "process in screen temp; ~/nvOC temp-log"
      echo ""
      running=""
    fi
  fi
fi

if [ $MINER_WATCHDOG == "YES" ] && [ $AUTO_START_MINER == "YES" ] && [ $SALFTER == "YES" ]
then
  HCD='/home/m1/5watchdog'
  echo ""
  sleep 2
  running=$(ps -ef | awk '$NF~"5watchdog" {print $2}')
  if [ "$running" == "" ]
  then
    echo "LAUNCHING:  MINER WATCHDOG"
    if [ $LOCALorREMOTE == "LOCAL" ]
    then
      echo ""
      echo "process in screen wdog, guake terminal Tab (f12), ~/nvOC wdog-log"
      screen -c /home/m1/screenrc-watchdog -dmSL wdog bash /home/m1/5watchdog
      #guake -n $HCD -r MINER_WATCHDOG -e "bash /home/m1/5watchdog"
      #if guake tab is already showing watchdog output dont open a new one
      if [[ -z $(ps ax | grep "tail -f /home/m1/nvoc_logs/watchdog-screenlog.0" |grep -v grep) ]];then
        guake -n /home/m1/5watchdog -r MINER_WATCHDOG -e "tail -f  /home/m1/nvoc_logs/watchdog-screenlog.0 "
      fi
      echo ""
      running=""
    elif [ $LOCALorREMOTE == "REMOTE" ]
    then
      screen -c /home/m1/screenrc-watchdog -dmSL wdog bash /home/m1/5watchdog
      echo ""
      echo "process in screen wdog; ~/nvOC wdog-log"
      echo ""
      running=""
    fi
  fi
elif [ $MINER_WATCHDOG == "YES" ] && [ $AUTO_START_MINER == "NO" ] && [ $SALFTER == "YES" ]
then
  echo "  "
  echo "  "
  echo "Auto start miner is set to NO, Watchdog is not starting"
  echo "  "
  echo "  "
fi

if [ $TELEGRAM_MESSAGES == "YES" ]
then
  HCD='/home/m1/7telegram'
  running=$(ps -ef | awk '$NF~"7telegram" {print $2}')
  if [ "$running" == "" ]
  then
    guake -n $HCD -r TELEGRAM_MESSAGES -e "bash /home/m1/7telegram"
    running=""
  fi
fi


if [ "$FAN_SPEED" -lt "40" ]
then
  FAN_SPEED=40
fi

if [[ $WTM_PROFIT_CHECK == "YES" ]] && [[ $WTM_AUTO_SWITCH == "NO" ]]
then

  echo ""
  echo "LAUNCHING:  WTM PROFIT CHECK "
  echo ""

  cat <<EOF >/home/m1/WTM.json
{
 "WTM_URL": "$WTM_AUTO_SWITCH_URL",
 "WTM_COINS": "$WTM_AUTO_SWITCH_COINS",
 "WTM_MIN_DIFFERENCE": "$WTM_MIN_DIFFERENCE",
 "currency":"$WTM_CURRENCY"
}
EOF

  HCD='/home/m1/8wtm_profit_check'
  running=$(ps -ef | awk '$NF~"8wtm_profit_check" {print $2}')
  if [ "$running" == "" ]
  then
    guake -n $HCD -r WTM_PROFIT_CHECK -e "bash /home/m1/8wtm_profit_check"
    running=""
  fi
fi


if [ $COIN == "SALFTER_NICEHASH_PROFIT_SWITCHING" ]  && [ $AUTO_START_MINER == "YES" ]
then
  HOSTEDIT="YES"
  if grep -q "api.nicehash.com" /etc/hosts;
  then
    HOSTEDIT="NO"
  fi

  if [ $HOSTEDIT == "YES" ]
  then
    sudo -- sh -c -e "echo '' >> /etc/hosts";
    sudo -- sh -c -e "echo '104.20.158.21 api.nicehash.com' >> /etc/hosts";
    echo UPDATED HOSTS FILE WITH IPv6 FIX
    echo ""
    echo ""
  fi

  sleep 2
  cd /home/m1

  if [ "$INDIVIDUAL_CLOCKS" == "YES" ]
  then
    gpu_clks_daggerhashimoto="[$__CORE_OVERCLOCK_0,$__CORE_OVERCLOCK_1,$__CORE_OVERCLOCK_2,$__CORE_OVERCLOCK_3,$__CORE_OVERCLOCK_4,$__CORE_OVERCLOCK_5,$__CORE_OVERCLOCK_6,$__CORE_OVERCLOCK_7,$__CORE_OVERCLOCK_8,$__CORE_OVERCLOCK_9,$__CORE_OVERCLOCK_10,$__CORE_OVERCLOCK_11,$__CORE_OVERCLOCK_12,$__CORE_OVERCLOCK_13,$__CORE_OVERCLOCK_14,$__CORE_OVERCLOCK_15,$__CORE_OVERCLOCK_16,$__CORE_OVERCLOCK_17,$__CORE_OVERCLOCK_18]"

    mem_clks_daggerhashimoto="[$MEMORY_OVERCLOCK_0,$MEMORY_OVERCLOCK_1,$MEMORY_OVERCLOCK_2,$MEMORY_OVERCLOCK_3,$MEMORY_OVERCLOCK_4,$MEMORY_OVERCLOCK_5,$MEMORY_OVERCLOCK_6,$MEMORY_OVERCLOCK_7,$MEMORY_OVERCLOCK_8,$MEMORY_OVERCLOCK_9,$MEMORY_OVERCLOCK_10,$MEMORY_OVERCLOCK_11,$MEMORY_OVERCLOCK_12,$MEMORY_OVERCLOCK_13,$MEMORY_OVERCLOCK_14,$MEMORY_OVERCLOCK_15,$MEMORY_OVERCLOCK_16,$MEMORY_OVERCLOCK_17,$MEMORY_OVERCLOCK_18]"

    gpu_clks_equihash=$gpu_clks_daggerhashimoto
    mem_clks_equihash=$mem_clks_daggerhashimoto
    gpu_clks_neoscrypt=$gpu_clks_daggerhashimoto
    mem_clks_neoscrypt=$mem_clks_daggerhashimoto
    gpu_clks_lyra2rev2=$gpu_clks_daggerhashimoto
    mem_clks_lyra2rev2=$mem_clks_daggerhashimoto
    gpu_clks_lbry=$gpu_clks_daggerhashimoto
    mem_clks_lbry=$mem_clks_daggerhashimoto
  else
    gpu_clks_daggerhashimoto="$__daggerhashimoto_CORE_OVERCLOCK"
    mem_clks_daggerhashimoto="$daggerhashimoto_MEMORY_OVERCLOCK"
    gpu_clks_equihash="$__equihash_CORE_OVERCLOCK"
    mem_clks_equihash="$equihash_MEMORY_OVERCLOCK"
    gpu_clks_neoscrypt="$__neoscrypt_CORE_OVERCLOCK"
    mem_clks_neoscrypt="$neoscrypt_MEMORY_OVERCLOCK"
    gpu_clks_lyra2rev2="$__lyra2rev2_CORE_OVERCLOCK"
    mem_clks_lyra2rev2="$lyra2rev2_MEMORY_OVERCLOCK"
    gpu_clks_lbry="$__lbry_CORE_OVERCLOCK"
    mem_clks_lbry="$lbry_MEMORY_OVERCLOCK"
  fi

  if [ "$INDIVIDUAL_POWERLIMIT" == "YES" ]
  then
    pwr_lim_daggerhashimoto="[$INDIVIDUAL_POWERLIMIT_0,$INDIVIDUAL_POWERLIMIT_1,$INDIVIDUAL_POWERLIMIT_2,$INDIVIDUAL_POWERLIMIT_3,$INDIVIDUAL_POWERLIMIT_4,$INDIVIDUAL_POWERLIMIT_5,$INDIVIDUAL_POWERLIMIT_6,$INDIVIDUAL_POWERLIMIT_7,$INDIVIDUAL_POWERLIMIT_8,$INDIVIDUAL_POWERLIMIT_9,$INDIVIDUAL_POWERLIMIT_10,$INDIVIDUAL_POWERLIMIT_11,$INDIVIDUAL_POWERLIMIT_12,$INDIVIDUAL_POWERLIMIT_13,$INDIVIDUAL_POWERLIMIT_14,$INDIVIDUAL_POWERLIMIT_15,$INDIVIDUAL_POWERLIMIT_16,$INDIVIDUAL_POWERLIMIT_17,$INDIVIDUAL_POWERLIMIT_18]"
    pwr_lim_equihash=$pwr_lim_daggerhashimoto
    pwr_lim_neoscrypt=$pwr_lim_daggerhashimoto
    pwr_lim_lyra2rev2=$pwr_lim_daggerhashimoto
    pwr_lim_lbry=$pwr_lim_daggerhashimoto
  else
    pwr_lim_daggerhashimoto=$daggerhashimoto_POWERLIMIT_WATTS
    pwr_lim_equihash=$equihash_POWERLIMIT_WATTS
    pwr_lim_neoscrypt=$neoscrypt_POWERLIMIT_WATTS
    pwr_lim_lyra2rev2=$lyra2rev2_POWERLIMIT_WATTS
    pwr_lim_lbry=$lbry_POWERLIMIT_WATTS
  fi

  cat <<EOF >/home/m1/conf.json
{
 "currency": "$CURRENCY",
 "pwrcost": $POWER_COST,
 "min_profit": $MINIMUM_PROFIT,
 "payment_addr": "$PAYMENT_ADDRESS",
 "miner_name": "$WORKER_NAME",
 "performance":
 {
   "daggerhashimoto": {
     "speed": 0.087, "power": 0.397,
     "power_limit": $pwr_lim_daggerhashimoto, "gpu_oc": $gpu_clks_daggerhashimoto, "mem_oc": $mem_clks_daggerhashimoto, "fan": 0,
     "cmd": "/home/m1/eth/ethminer_12dev2/ethminer -SP 2 -S daggerhashimoto.usa.nicehash.com:3353 -O {ADDR}.{MINER}:x -U"
   },
   "equihash": {
     "speed": 0.000001140, "power": 0.397,
     "power_limit": $pwr_lim_equihash, "gpu_oc": $gpu_clks_equihash, "mem_oc": $mem_clks_equihash, "fan": 0,
     "cmd": "/home/m1/zec/v3_4/miner --eexit 3 --fee 0 --pec --server equihash.usa.nicehash.com --user {ADDR}.{MINER} --pass z --port 3357"
   },
   "neoscrypt": {
     "speed": 0.002160, "power": 0.397,
     "power_limit": $pwr_lim_neoscrypt, "gpu_oc": $gpu_clks_neoscrypt, "mem_oc": $mem_clks_neoscrypt, "fan": 0,
     "cmd": "/home/m1/KTccminer/ccminer -a neoscrypt -o stratum+tcp://neoscrypt.usa.nicehash.com:3341 -u {ADDR}.{MINER} -p x"
   },
   "lyra2rev2": {
     "speed": 0.081, "power": 0.386,
     "power_limit": $pwr_lim_lyra2rev2, "gpu_oc": $gpu_clks_lyra2rev2, "mem_oc": $mem_clks_lyra2rev2, "fan": 0,
     "cmd": "/home/m1/SPccminer/ccminer -a lyra2v2 -o stratum+tcp://lyra2rev2.usa.nicehash.com:3347 -u {ADDR}.{MINER} -p x"
   },
   "lbry": {
     "speed": 0.639, "power": 0.392,
     "power_limit": $pwr_lim_lbry, "gpu_oc": $gpu_clks_lbry, "mem_oc": $mem_clks_lbry, "fan": 0,
     "cmd": "/home/m1/SPccminer/ccminer -a lbry -o stratum+tcp://lbry.usa.nicehash.com:3356 -u {ADDR}.{MINER} -p x"
   }
 }
}
EOF

  echo "LAUNCHING:  SALFTER_NICEHASH_PROFIT_SWITCHING "
  echo ""

  python2.7 '/home/m1/switch' /home/m1/conf.json

  if [ $LOCALorREMOTE == "LOCAL" ]
  then
    guake -n 1 -r SALFTER_NICEHASH_PROFIT_SWITCHING -e "screen -r miner"
  fi

  while true
  do
    echo ""
    cat current-profit
    echo ""

    if [ $LOCALorREMOTE == "LOCAL" ]
    then
      guake -r SALFTER_NICEHASH_PROFIT_SWITCHING -e "screen -r miner"
      echo ""
      echo "mining process in Guake Tab"
      echo ""
      sleep $PROFIT_CHECK_TIMEOUT
      python2.7 '/home/m1/switch' /home/m1/conf.json
    fi

    if [ $LOCALorREMOTE == "REMOTE" ]
    then
      echo "ENTER:"
      echo ""
      echo "screen -r miner"
      echo ""
      echo "in a terminal to view mining process"
      sleep $PROFIT_CHECK_TIMEOUT
      python2.7 '/home/m1/switch' /home/m1/conf.json
    fi
  done

elif [ $COIN == "SALFTER_NICEHASH_PROFIT_SWITCHING" ]  && [ $AUTO_START_MINER == "NO" ]
then
  echo "    "
  echo "    "
  echo "Auto Start Miner is set to NO"
  echo "    "
  echo "Miner is not starting"
  echo "    "
  echo "    "
fi


if [ $COIN == "SALFTER_MPH_PROFIT_SWITCHING" ] && [ $AUTO_START_MINER == "YES" ]
then

  cd /home/m1

  if [ "$INDIVIDUAL_CLOCKS" == "YES" ]
  then
    gpu_clks_daggerhashimoto="[$__CORE_OVERCLOCK_0,$__CORE_OVERCLOCK_1,$__CORE_OVERCLOCK_2,$__CORE_OVERCLOCK_3,$__CORE_OVERCLOCK_4,$__CORE_OVERCLOCK_5,$__CORE_OVERCLOCK_6,$__CORE_OVERCLOCK_7,$__CORE_OVERCLOCK_8,$__CORE_OVERCLOCK_9,$__CORE_OVERCLOCK_10,$__CORE_OVERCLOCK_11,$__CORE_OVERCLOCK_12,$__CORE_OVERCLOCK_13,$__CORE_OVERCLOCK_14,$__CORE_OVERCLOCK_15,$__CORE_OVERCLOCK_16,$__CORE_OVERCLOCK_17,$__CORE_OVERCLOCK_18]"

    mem_clks_daggerhashimoto="[$MEMORY_OVERCLOCK_0,$MEMORY_OVERCLOCK_1,$MEMORY_OVERCLOCK_2,$MEMORY_OVERCLOCK_3,$MEMORY_OVERCLOCK_4,$MEMORY_OVERCLOCK_5,$MEMORY_OVERCLOCK_6,$MEMORY_OVERCLOCK_7,$MEMORY_OVERCLOCK_8,$MEMORY_OVERCLOCK_9,$MEMORY_OVERCLOCK_10,$MEMORY_OVERCLOCK_11,$MEMORY_OVERCLOCK_12,$MEMORY_OVERCLOCK_13,$MEMORY_OVERCLOCK_14,$MEMORY_OVERCLOCK_15,$MEMORY_OVERCLOCK_16,$MEMORY_OVERCLOCK_17,$MEMORY_OVERCLOCK_18]"

    gpu_clks_equihash=$gpu_clks_daggerhashimoto
    mem_clks_equihash=$mem_clks_daggerhashimoto
    gpu_clks_neoscrypt=$gpu_clks_daggerhashimoto
    mem_clks_neoscrypt=$mem_clks_daggerhashimoto
    gpu_clks_lyra2rev2=$gpu_clks_daggerhashimoto
    mem_clks_lyra2rev2=$mem_clks_daggerhashimoto
    gpu_clks_lbry=$gpu_clks_daggerhashimoto
    mem_clks_lbry=$mem_clks_daggerhashimoto
    __Blake_Vanilla_CORE_OVERCLOCK=$gpu_clks_daggerhashimoto
    Blake_Vanilla_MEMORY_OVERCLOCK=$mem_clks_daggerhashimoto
    __Cryptonight_CORE_OVERCLOCK=$gpu_clks_daggerhashimoto
    Cryptonight_MEMORY_OVERCLOCK=$mem_clks_daggerhashimoto
    __Groestl_CORE_OVERCLOCK=$gpu_clks_daggerhashimoto
    Groestl_MEMORY_OVERCLOCK=$mem_clks_daggerhashimoto
    __Keccak_CORE_OVERCLOCK=$gpu_clks_daggerhashimoto
    Keccak_MEMORY_OVERCLOCK=$mem_clks_daggerhashimoto
    __Myriad_Groestl_CORE_OVERCLOCK=$gpu_clks_daggerhashimoto
    Myriad_Groestl_MEMORY_OVERCLOCK=$mem_clks_daggerhashimoto
    __Qubit_CORE_OVERCLOCK=$gpu_clks_daggerhashimoto
    Qubit_MEMORY_OVERCLOCK=$mem_clks_daggerhashimoto
    __Scrypt_CORE_OVERCLOCK=$gpu_clks_daggerhashimoto
    Scrypt_MEMORY_OVERCLOCK=$mem_clks_daggerhashimoto
    __Sia_CORE_OVERCLOCK=$gpu_clks_daggerhashimoto
    Sia_MEMORY_OVERCLOCK=$mem_clks_daggerhashimoto
    __Skein_CORE_OVERCLOCK=$gpu_clks_daggerhashimoto
    Skein_MEMORY_OVERCLOCK=$mem_clks_daggerhashimoto
    __X11_CORE_OVERCLOCK=$gpu_clks_daggerhashimoto
    X11_MEMORY_OVERCLOCK=$mem_clks_daggerhashimoto
  else
    gpu_clks_daggerhashimoto="$__daggerhashimoto_CORE_OVERCLOCK"
    mem_clks_daggerhashimoto="$daggerhashimoto_MEMORY_OVERCLOCK"
    gpu_clks_equihash="$__equihash_CORE_OVERCLOCK"
    mem_clks_equihash="$equihash_MEMORY_OVERCLOCK"
    gpu_clks_neoscrypt="$__neoscrypt_CORE_OVERCLOCK"
    mem_clks_neoscrypt="$neoscrypt_MEMORY_OVERCLOCK"
    gpu_clks_lyra2rev2="$__lyra2rev2_CORE_OVERCLOCK"
    mem_clks_lyra2rev2="$lyra2rev2_MEMORY_OVERCLOCK"
    gpu_clks_lbry="$__lbry_CORE_OVERCLOCK"
    mem_clks_lbry="$lbry_MEMORY_OVERCLOCK"
  fi

  if [ "$INDIVIDUAL_POWERLIMIT" == "YES" ]
  then
    pwr_lim_daggerhashimoto="[$INDIVIDUAL_POWERLIMIT_0,$INDIVIDUAL_POWERLIMIT_1,$INDIVIDUAL_POWERLIMIT_2,$INDIVIDUAL_POWERLIMIT_3,$INDIVIDUAL_POWERLIMIT_4,$INDIVIDUAL_POWERLIMIT_5,$INDIVIDUAL_POWERLIMIT_6,$INDIVIDUAL_POWERLIMIT_7,$INDIVIDUAL_POWERLIMIT_8,$INDIVIDUAL_POWERLIMIT_9,$INDIVIDUAL_POWERLIMIT_10,$INDIVIDUAL_POWERLIMIT_11,$INDIVIDUAL_POWERLIMIT_12,$INDIVIDUAL_POWERLIMIT_13,$INDIVIDUAL_POWERLIMIT_14,$INDIVIDUAL_POWERLIMIT_15,$INDIVIDUAL_POWERLIMIT_16,$INDIVIDUAL_POWERLIMIT_17,$INDIVIDUAL_POWERLIMIT_18]"
    pwr_lim_equihash=$pwr_lim_daggerhashimoto
    pwr_lim_neoscrypt=$pwr_lim_daggerhashimoto
    pwr_lim_lyra2rev2=$pwr_lim_daggerhashimoto
    pwr_lim_lbry=$pwr_lim_daggerhashimoto
    Blake_Vanilla_POWERLIMIT_WATTS=$pwr_lim_daggerhashimoto
    Cryptonight_POWERLIMIT_WATTS=$pwr_lim_daggerhashimoto
    Groestl_POWERLIMIT_WATTS=$pwr_lim_daggerhashimoto
    Keccak_POWERLIMIT_WATTS=$pwr_lim_daggerhashimoto
    Myriad_Groestl_POWERLIMIT_WATTS=$pwr_lim_daggerhashimoto
    Qubit_POWERLIMIT_WATTS=$pwr_lim_daggerhashimoto
    Scrypt_POWERLIMIT_WATTS=$pwr_lim_daggerhashimoto
    Sia_POWERLIMIT_WATTS=$pwr_lim_daggerhashimoto
    Skein_POWERLIMIT_WATTS=$pwr_lim_daggerhashimoto
    X11_POWERLIMIT_WATTS=$pwr_lim_daggerhashimoto5
  else
    pwr_lim_daggerhashimoto=$daggerhashimoto_POWERLIMIT_WATTS
    pwr_lim_equihash=$equihash_POWERLIMIT_WATTS
    pwr_lim_neoscrypt=$neoscrypt_POWERLIMIT_WATTS
    pwr_lim_lyra2rev2=$lyra2rev2_POWERLIMIT_WATTS
    pwr_lim_lbry=$lbry_POWERLIMIT_WATTS
  fi

  cat <<EOF >/home/m1/mph_conf.json
{
  "user_name": "$MPH_USERNAME",
  "miner_name": "$WORKER_NAME",
  "card_type": "nvidia",
  "currency": "$CURRENCY",
  "pwrcost": $POWER_COST,
  "min_profit": $MINIMUM_PROFIT,
  "miners":
  {
    "Blake-Vanilla":
    {
      "bin": "/home/m1/SPccminer/ccminer -a vanilla -o stratum+tcp://{HOST}:{PORT} -u {NAME}.{MINER} -p x",
      "power_limit": $Blake_Vanilla_POWERLIMIT_WATTS, "gpu_oc": $__Blake_Vanilla_CORE_OVERCLOCK, "mem_oc": $Blake_Vanilla_MEMORY_OVERCLOCK, "fan": 0,
      "speed": 12.3, "power": 0.389
    },
    "Cryptonight":
    {
      "bin": "/home/m1/KTccminer-cryptonight/ccminer -o stratum+tcp://{HOST}:{PORT} -u {NAME}.{MINER} -p x",
      "power_limit": $Cryptonight_POWERLIMIT_WATTS, "gpu_oc": $__Cryptonight_CORE_OVERCLOCK, "mem_oc": $Cryptonight_MEMORY_OVERCLOCK, "fan": 0,
      "speed": 0.000002, "power": 0.325
    },
    "Equihash":
    {
      "bin": "/home/m1/zec/v3_4/miner --eexit 3 --fee 0 --pec --server {HOST} --user {NAME}.{MINER} --pass z --port {PORT}",
      "power_limit": $pwr_lim_equihash, "gpu_oc": $gpu_clks_equihash, "mem_oc": $mem_clks_equihash, "fan": 0,
      "speed": 0.000001140, "power": 0.397
    },
    "Ethash":
    {
      "bin": "/home/m1/eth/ethminer_12dev2/ethminer -S {HOST}:{PORT} -O {NAME}.{MINER}:x -U",
      "power_limit": $pwr_lim_daggerhashimoto, "gpu_oc": $gpu_clks_daggerhashimoto, "mem_oc": $mem_clks_daggerhashimoto, "fan": 0,
      "speed": 0.087, "power": 0.397
    },
    "Groestl":
    {
      "bin": "/home/m1/SPccminer/ccminer -a groestl -o stratum+tcp://{HOST}:{PORT} -u {NAME}.{MINER} -p x",
      "power_limit": $Groestl_POWERLIMIT_WATTS, "gpu_oc": $__Groestl_CORE_OVERCLOCK, "mem_oc": $Groestl_MEMORY_OVERCLOCK, "fan": 0,
      "speed": 0.0853, "power": 0.392
    },
    "Keccak":
    {
      "bin": "/home/m1/SPccminer/ccminer -a keccak -o stratum+tcp://{HOST}:{PORT} -u {NAME}.{MINER} -p x",
      "power_limit": $Keccak_POWERLIMIT_WATTS, "gpu_oc": $__Keccak_CORE_OVERCLOCK, "mem_oc": $Keccak_MEMORY_OVERCLOCK, "fan": 0,
      "speed": 1.45, "power": 0.391
    },
    "Lyra2RE2":
    {
      "bin": "/home/m1/SPccminer/ccminer -a lyra2v2 -o stratum+tcp://{HOST}:{PORT} -u {NAME}.{MINER} -p x",
      "power_limit": $pwr_lim_lyra2rev2, "gpu_oc": $gpu_clks_lyra2rev2, "mem_oc": $mem_clks_lyra2rev2, "fan": 0,
      "speed": 0.081, "power": 0.386
    },
    "Myriad-Groestl":
    {
      "bin": "/home/m1/SPccminer/ccminer -a myr-gr -o stratum+tcp://{HOST}:{PORT} -u {NAME}.{MINER} -p x",
      "power_limit": $Myriad_Groestl_POWERLIMIT_WATTS, "gpu_oc": $__Myriad_Groestl_CORE_OVERCLOCK, "mem_oc": $Myriad_Groestl_MEMORY_OVERCLOCK, "fan": 0,
      "speed": 0.158, "power": 0.391
    },
    "NeoScrypt":
    {
      "bin": "/home/m1/KTccminer/ccminer -a neoscrypt -o stratum+tcp://{HOST}:{PORT} -u {NAME}.{MINER} -p x",
      "power_limit": $pwr_lim_neoscrypt, "gpu_oc": $gpu_clks_neoscrypt, "mem_oc": $mem_clks_neoscrypt, "fan": 0,
      "speed": 0.002160, "power": 0.397
    },
    "Qubit":
    {
      "bin": "/home/m1/SPccminer/ccminer -a qubit -o stratum+tcp://{HOST}:{PORT} -u {NAME}.{MINER} -p x",
      "power_limit": $Qubit_POWERLIMIT_WATTS, "gpu_oc": $__Qubit_CORE_OVERCLOCK, "mem_oc": $Qubit_MEMORY_OVERCLOCK, "fan": 0,
      "speed": 0.0509, "power": 0.382
    },
    "Scrypt":
    {
      "bin": "/home/m1/SPccminer/ccminer -a scrypt -o stratum+tcp://{HOST}:{PORT} -u {NAME}.{MINER} -p x",
      "power_limit": $Scrypt_POWERLIMIT_WATTS, "gpu_oc": $__Scrypt_CORE_OVERCLOCK, "mem_oc": $Scrypt_MEMORY_OVERCLOCK, "fan": 0,
      "speed": 0.00224, "power": 0.403
    },
    "Sia":
    {
      "bin": "/home/m1/SPccminer/ccminer -a sia -o stratum+tcp://{HOST}:{PORT} -u {NAME}.{MINER} -p x",
      "power_limit": $Sia_POWERLIMIT_WATTS, "gpu_oc": $__Sia_CORE_OVERCLOCK, "mem_oc": $Sia_MEMORY_OVERCLOCK, "fan": 0,
      "speed": 3.700, "power": 0.403
    },
    "Skein":
    {
      "bin": "/home/m1/ASccminer/ccminer -a skein -o stratum+tcp://{HOST}:{PORT} -u {NAME}.{MINER} -p x",
      "power_limit": $Skein_POWERLIMIT_WATTS, "gpu_oc": $__Skein_CORE_OVERCLOCK, "mem_oc": $Skein_MEMORY_OVERCLOCK, "fan": 0,
      "speed": 0.835, "power": 0.383
    },
    "X11":
    {
      "bin": "/home/m1/TPccminer/ccminer -a x11 -o stratum+tcp://{HOST}:{PORT} -u {NAME}.{MINER} -p x",
      "power_limit": $X11_POWERLIMIT_WATTS, "gpu_oc": $__X11_CORE_OVERCLOCK, "mem_oc": $X11_MEMORY_OVERCLOCK, "fan": 0,
      "speed": 0.0327, "power": 0.403
    }
  }
}
EOF

  echo "LAUNCHING:  SALFTER_MPH_PROFIT_SWITCHING "
  echo ""

  python2.7 '/home/m1/mph_switch' /home/m1/mph_conf.json

  if [ $LOCALorREMOTE == "LOCAL" ]
  then
    guake -n 1 -r SALFTER_MPH_PROFIT_SWITCHING -e "screen -r miner"
  fi



  while true
  do
    echo ""
    cat current-profit
    echo ""

    if [ $LOCALorREMOTE == "LOCAL" ]
    then
      guake -r SALFTER_MPH_PROFIT_SWITCHING -e "screen -r miner"
      echo ""
      echo "mining process in Guake Tab"
      echo ""
      sleep $PROFIT_CHECK_TIMEOUT
      python2.7 '/home/m1/mph_switch' /home/m1/mph_conf.json
    fi

    if [ $LOCALorREMOTE == "REMOTE" ]
    then
      echo "ENTER:"
      echo ""
      echo "screen -r miner"
      echo ""
      echo "in a terminal to view mining process"
      sleep $PROFIT_CHECK_TIMEOUT
      python2.7 '/home/m1/mph_switch' /home/m1/mph_conf.json
    fi
  done
elif [ $COIN == "SALFTER_MPH_PROFIT_SWITCHING" ]  && [ $AUTO_START_MINER == "NO" ]
then
  echo "    "
  echo "    "
  echo "Auto Start Miner is set to NO"
  echo "    "
  echo "Miner is not starting"
  echo "    "
  echo "    "
fi


if [ $SALFTER == "NO" ]
then

  if [ $INDIVIDUAL_CLOCKS == "YES" ]
  then
    __CORE_OVERCLOCK[0]=$__CORE_OVERCLOCK_0
    MEMORY_OVERCLOCK[0]=$MEMORY_OVERCLOCK_0
    __CORE_OVERCLOCK[1]=$__CORE_OVERCLOCK_1
    MEMORY_OVERCLOCK[1]=$MEMORY_OVERCLOCK_1
    __CORE_OVERCLOCK[2]=$__CORE_OVERCLOCK_2
    MEMORY_OVERCLOCK[2]=$MEMORY_OVERCLOCK_2
    __CORE_OVERCLOCK[3]=$__CORE_OVERCLOCK_3
    MEMORY_OVERCLOCK[3]=$MEMORY_OVERCLOCK_3
    __CORE_OVERCLOCK[4]=$__CORE_OVERCLOCK_4
    MEMORY_OVERCLOCK[4]=$MEMORY_OVERCLOCK_4
    __CORE_OVERCLOCK[5]=$__CORE_OVERCLOCK_5
    MEMORY_OVERCLOCK[5]=$MEMORY_OVERCLOCK_5
    __CORE_OVERCLOCK[6]=$__CORE_OVERCLOCK_6
    MEMORY_OVERCLOCK[6]=$MEMORY_OVERCLOCK_6
    __CORE_OVERCLOCK[7]=$__CORE_OVERCLOCK_7
    MEMORY_OVERCLOCK[7]=$MEMORY_OVERCLOCK_7
    __CORE_OVERCLOCK[8]=$__CORE_OVERCLOCK_8
    MEMORY_OVERCLOCK[8]=$MEMORY_OVERCLOCK_8
    __CORE_OVERCLOCK[9]=$__CORE_OVERCLOCK_9
    MEMORY_OVERCLOCK[9]=$MEMORY_OVERCLOCK_9
    __CORE_OVERCLOCK[10]=$__CORE_OVERCLOCK_10
    MEMORY_OVERCLOCK[10]=$MEMORY_OVERCLOCK_10
    __CORE_OVERCLOCK[11]=$__CORE_OVERCLOCK_11
    MEMORY_OVERCLOCK[11]=$MEMORY_OVERCLOCK_11
    __CORE_OVERCLOCK[12]=$__CORE_OVERCLOCK_12
    MEMORY_OVERCLOCK[12]=$MEMORY_OVERCLOCK_12
    __CORE_OVERCLOCK[13]=$__CORE_OVERCLOCK_13
    MEMORY_OVERCLOCK[13]=$MEMORY_OVERCLOCK_13
    __CORE_OVERCLOCK[14]=$__CORE_OVERCLOCK_14
    MEMORY_OVERCLOCK[14]=$MEMORY_OVERCLOCK_14
    __CORE_OVERCLOCK[15]=$__CORE_OVERCLOCK_15
    MEMORY_OVERCLOCK[15]=$MEMORY_OVERCLOCK_15
    __CORE_OVERCLOCK[16]=$__CORE_OVERCLOCK_16
    MEMORY_OVERCLOCK[16]=$MEMORY_OVERCLOCK_16
    __CORE_OVERCLOCK[17]=$__CORE_OVERCLOCK_17
    MEMORY_OVERCLOCK[17]=$MEMORY_OVERCLOCK_17
    __CORE_OVERCLOCK[18]=$__CORE_OVERCLOCK_18
    MEMORY_OVERCLOCK[18]=$MEMORY_OVERCLOCK_18
  fi

  if [ $INDIVIDUAL_CLOCKS == "NO" ]
  then
    __CORE_OVERCLOCK[0]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[0]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[1]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[1]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[2]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[2]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[3]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[3]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[4]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[4]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[5]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[5]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[6]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[6]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[7]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[7]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[8]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[8]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[9]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[9]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[10]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[10]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[11]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[11]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[12]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[12]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[13]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[13]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[14]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[14]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[15]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[15]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[16]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[16]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[17]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[17]=$MEMORY_OVERCLOCK
    __CORE_OVERCLOCK[18]=$__CORE_OVERCLOCK
    MEMORY_OVERCLOCK[18]=$MEMORY_OVERCLOCK
  fi

  TI="3"

  if [ $___1050_or_1050ti == "YES" ]
  then
    TI="2"
    if [ $NORMAL == "YES" ]
    then
      TI="2 3"
    fi
  fi

  if [ $SLOW_USB_KEY_MODE == "YES" ]
  then
    sleep 6
  fi


  if [ $P106_100_FULL_HEADLESS_MODE == "NO" ]
  then

    gpu=0
    while [ $gpu -lt $GPUS ]
    do
      for j in $TI
      do
        CORE=${__CORE_OVERCLOCK[${gpu}]}
        MEM=${MEMORY_OVERCLOCK[${gpu}]}
        ${NVD} -a [gpu:$gpu]/GPUGraphicsClockOffset[${j}]=$CORE
        ${NVD} -a [gpu:$gpu]/GPUMemoryTransferRateOffset[${j}]=$MEM
      done
      gpu=$(($gpu+1))
    done

    if [[ $MANUAL_FAN == "YES" && $MINER_TEMP_CONTROL == "NO" ]]
    then
      gpu=0
      while [ $gpu -lt $GPUS ]
      do
        ${NVD} -a [gpu:$gpu]/GPUFanControlState=1
        ${NVD} -a [fan:$gpu]/GPUTargetFanSpeed=${FAN_SPEED}
        gpu=$(($gpu+1))
      done
    fi

    if [[ $MANUAL_FAN == "NO" && $MINER_TEMP_CONTROL == "NO" ]]
    then
      gpu=0
      while [ $gpu -lt $GPUS ]
      do
        ${NVD} -a [gpu:$gpu]/GPUFanControlState=0
        gpu=$(($gpu+1))
      done
    fi
  fi

  UPDATE="YES"

  if [ $P106_100_FULL_HEADLESS_MODE == "YES" ]
  then
    if grep -q "XORG_UPDATED" /home/m1/xorg_flag;
    then
      sleep 2
      UPDATE="NO"
    fi
    if [ $UPDATE == "YES" ]
    then
      sudo nvidia-xconfig --enable-all-gpus --cool-bits=12
      cd /home/m1
      echo XORG_UPDATED > '/home/m1/xorg_flag'
      sleep 4
      echo "XORG UPDATED"
      echo ''
      echo "Rebooting in 5"
      echo ''
      echo "disconnect monitor if connected"
      sleep 5
      sudo reboot
    fi
    sleep 4
    ${NVD} -a GPUGraphicsClockOffset[2]=${__CORE_OVERCLOCK}
    ${NVD} -a GPUMemoryTransferRateOffset[2]=${MEMORY_OVERCLOCK}
  fi

  if [ $GPUPowerMizerMode_Adjust == "YES" ]
  then
    gpu=0
    while [ $gpu -lt $GPUS ]
    do
      sudo ${NVD} -a [gpu:$gpu]/GPUPowerMizerMode=${GPUPowerMizerMode}
      gpu=$(($gpu+1))
    done
  fi

  if [ $SLOW_USB_KEY_MODE == "YES" ]
  then
    sleep 6
  fi

  if [ $AUTO_START_MINER == "YES" ]
  then
    echo "Auto Start Miner Set to YES"
    if [ $MINER_WATCHDOG == "YES" ]
    then
      HCD='/home/m1/5watchdog'
      echo ""

      sleep 2
      running=$(ps -ef | awk '$NF~"5watchdog" {print $2}')
      if [ "$running" == "" ]
      then
        if [ $LOCALorREMOTE == "LOCAL" ]
        then
          echo "LAUNCHING:  MINER WATCHDOG"
          echo ""
          echo "process in screen wdog, guake terminal Tab (f12), ~/nvOC wdog-log"
          screen -c /home/m1/screenrc-watchdog -dmSL wdog bash /home/m1/5watchdog
          #guake -n $HCD -r MINER_WATCHDOG -e "bash /home/m1/5watchdog"
          #if guake tab is already showing watchdog output dont open a new one
          if [[ -z $(ps ax | grep "tail -f /home/m1/nvoc_logs/watchdog-screenlog.0" |grep -v grep) ]];then
            guake -n /home/m1/5watchdog -r MINER_WATCHDOG -e "tail -f  /home/m1/nvoc_logs/watchdog-screenlog.0 "
          fi
          echo ""
          running=""
        elif [ $LOCALorREMOTE == "REMOTE" ]
        then
          screen -c /home/m1/screenrc-watchdog -dmSL wdog bash /home/m1/5watchdog
          echo "LAUNCHING:  MINER WATCHDOG"
          echo ""
          echo "process in screen wdog; ~/nvOC wdog-log"
          running=""
        fi
      fi
    fi

    if [ $WTM_AUTO_SWITCH == "YES" ]
    then
      echo ""
      echo "LAUNCHING:  WTM AUTO SWITCH "
      echo ""
      cat <<EOF >/home/m1/WTM.json
{
 "WTM_URL": "$WTM_AUTO_SWITCH_URL",
 "WTM_COINS": "$WTM_AUTO_SWITCH_COINS",
 "WTM_MIN_DIFFERENCE": "$WTM_MIN_DIFFERENCE",
 "currency":"$WTM_CURRENCY"
}
EOF
      HCD='/home/m1/8wtm_auto_switch'
      running=$(ps -ef | awk '$NF~"8wtm_auto_switch" {print $2}')
      if [ "$running" == "" ]
      then
        guake -n $HCD -r WTM_AUTO_SWITCH -e "bash /home/m1/8wtm_auto_switch"
        running=""
      fi
    fi

    reup=0
    #running=$(ps ax | grep -i screen | grep miner | awk '"miner" {print $1}')
    running=$(ps ax | grep -v cpuminer | grep -i screen | grep miner | awk '"miner" {print $1}')

    if [ "$running" != "" ]
    then
      #target=$(ps ax | grep -i screen | grep miner | awk '"miner" {print $1}')
      target=$(ps ax | grep -v cpuminer | grep -i screen | grep miner | awk '"miner" {print $1}')
      kill $target
      reup=1
    fi
    sleep 2
    echo ""
    echo "LAUNCHING:  MINER"
    echo "    "
    #running=$(ps ax | grep -i screen | grep miner | awk '"miner" {print $1}')
    running=$(ps ax | grep -v cpuminer | grep -i screen | grep miner | awk '"miner" {print $1}')
    if [ "$running" == "" ]
    then
      bash /home/m1/0miner
      echo "    "
      echo "    "$(ps ax | grep -i screen | grep miner | grep -o 'SCREEN.*')
      echo "    "
      if [ $LOCALorREMOTE == "REMOTE" ]
      then
        echo "Miner output: ~/nvOC miner-log"
        echo "    "
        echo "    "
        running=""
      elif [ $LOCALorREMOTE == "LOCAL" ]
      then
        touch /home/m1/nvoc_logs/screenlog.0
        tail -f /home/m1/nvoc_logs/screenlog.0
      fi
    fi

  elif [ $AUTO_START_MINER == "NO" ]
  then
    echo "    "
    echo "    "
    echo "Auto Start Miner is set to NO"
    echo "    "
    echo "Miner is not starting"
    echo "    "
    echo "    "
  fi
fi


# Infinite Loop
while true
do
  sleep 60
done
