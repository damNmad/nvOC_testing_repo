#!/usr/bin/env python2.7
# _*_ coding: utf-8 _*_
#### Whattomine auto switch written by papampi + hurvajs77 + damNmad
### papampi BTC address:  1NsnsnqkkVuopTGvUSGrkMhhug8kg6zgP9
### damNmad BTC address:  1Mtf6K7c3ZhBDcPz91c4wcQ95DxLn88zC
### hurvajs77 BTC address:  3NRMRn3ZKrxwQqkwPfEsjb14dkVDWobyBC

import json
import requests
import sys
import urllib
import urllib2
configFile = "./WTM.json"
topCoinLogFile = "./WTM_top_coin"

# load config
cfg = json.loads(open(configFile).read())
requestUrl = urllib.unquote(urllib.unquote(cfg["WTM_URL"]))
minimumDifference = float(cfg["WTM_MIN_DIFFERENCE"])
includedCoins = cfg["WTM_COINS"].upper()
delimiter = ";"
currency=cfg["currency"]

# load included coins
includedCoins = includedCoins.strip(delimiter)

if not includedCoins:
    print "No incluted coins. Please, check 1bash script for WTM settings."
    sys.exit()

includedCoins = includedCoins.split(delimiter)


def saveTopCoin(data):
    logFile = open(topCoinLogFile, "w")
    logFile.write(data)
    logFile.close()
    return

#Get BTC exchange rate from blockchain.info
try:
    exchrate=float(json.loads(urllib2.urlopen("https://blockchain.info/ticker").read())[currency]["last"])
except:
    print("Can not get data from blockchain.info")
    sys.exit()
    raise

#BTC Rates for web, output, ...
print "BTC PRICE: " + str(exchrate) + " " + str(currency)
exchrateLog = open("WTM_BTC_EXCHANGE_RATE", "w")
exchrateLog.write(str(exchrate) + " " + str(currency))
exchrateLog.close()

# try load previous top coin
try:
    with open(topCoinLogFile) as contentFile:
        content = contentFile.read()
except:
    content = "-:0"

topCoin = content.split(":")
print "Currently mining coin: %s, last profit: %s" % (topCoin[0], topCoin[1])

try:
    httpResponse = requests.get(requestUrl)
except:
    print("Can not get data from WhatToMine.com.")
    sys.exit()
    raise

try:
    data = httpResponse.json()['coins']
    data = data.values()
except:
    print "Invalid JSON"
    sys.exit()
    raise

# filter WTM coins by user selection only
for i in reversed(data):
    if i["tag"] not in includedCoins:
        data.remove(i)

# calculate coin revenue
#print currency + " Revenue"
newRev = {}
for i in data:
    newRev[i["tag"]] = float(i["btc_revenue"])
newRev = sorted(newRev.items(), key=lambda x: x[1], reverse=True)
#save current revenue
RevLog = open("WTM_current_revenue", "w")
for i, j in newRev:
    RevLog.write("%s:%s\n" % (i, '%02.2f' %(j*exchrate) ))
    print  i, '%02.2f' %(j*exchrate) +" " + currency
RevLog.close()

# calculate coin profitability
newProfits = {}
for i in data:
    newProfits[i["tag"]] = i["profitability"]
newProfits = sorted(newProfits.items(), key=lambda x: x[1], reverse=True)

# save current profit
print "New profits"
profitLog = open("WTM_current_profit", "w")
for i, j in newProfits:
    profitLog.write("%s:%s\n" % (i, j))
    print str(i) + ": " + str(j) + " %"
profitLog.close()

# is currently mining coin same as a new the most profitability coin?
if newProfits[0][0] == topCoin[0]:
    print "Same coin"
    saveTopCoin(str(newProfits[0][0]) + ":" + str(newProfits[0][1]))
    sys.exit()

if (float(newProfits[0][1]) - minimumDifference) < float(topCoin[1]):
    # try find actual top coin and compare their profit with maximum of current profits
    try:
        topCoinNewProfit = filter(lambda x: x["tag"] == topCoin[0], data)[0]
        if (float(newProfits[0][1]) - minimumDifference) > float(topCoinNewProfit["profitability"]):
            print "Currently mining %s coin is no longer more profitabile with %s" % (topCoin[0], topCoin[1])
            print "Switching to new %s coin %s" % (newProfits[0][0], newProfits[0][1])
        else:
            print "Currently mining coin is still more profitabile (with subtracted difference) than new top coin"
            print "Continuing mining %s " % topCoin[0]
            saveTopCoin(topCoin[0] + ":" + topCoinNewProfit["profitability"])
            sys.exit()
    except:
	# Some errors, blankedd this line "Top coin was not found in list of included coins"
        print ""
        sys.exit()
else:
    # current profit is higher that currently mining
    print "Found %s coin with higher profitability %s" % (newProfits[0][0], newProfits[0][1])

saveTopCoin(str(newProfits[0][0]) + ":" + str(newProfits[0][1]))
